//---------------------------------------------------------------------------------------------
// This file was AUTO-GENERATED by "Web API Controllers" Xomega.Net generator.
//
// Manual CHANGES to this file WILL BE LOST when the code is regenerated.
//---------------------------------------------------------------------------------------------

using Demo.Services.Common;
using Microsoft.AspNetCore.Mvc;
using System;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;
using Xomega.Framework;
using Xomega.Framework.Services;

namespace Demo.Services.Rest
{
    public partial class MaintenanceTemplateController : BaseController
    {
        private readonly IMaintenanceTemplateService svc;

        public MaintenanceTemplateController(ErrorList errorList, ErrorParser errorParser, IMaintenanceTemplateService service)
            : base(errorList, errorParser)
        {
            svc = service;
        }

        ///<summary>
        /// Reads the values of a Maintenance Template object by its key.
        ///</summary>
        [Route("maintenance-template/{_id}")]
        [HttpGet]
        public async Task<ActionResult> ReadAsync([FromRoute] int _id, CancellationToken token = default)
        {
            ActionResult response;
            try
            {
                if (ModelState.IsValid)
                {
                    Output<MaintenanceTemplate_ReadOutput> output = await svc.ReadAsync(_id, token);
                    response = StatusCode((int)output.HttpStatus, output);
                    return response;
                }
                else
                {
                    currentErrors.AddModelErrors(ModelState);
                }
            }
            catch (Exception ex)
            {
                currentErrors.MergeWith(errorsParser.FromException(ex));
            }
            response = StatusCode((int)currentErrors.HttpStatus, new Output(currentErrors));
            return response;
        }

        ///<summary>
        /// Creates a new Maintenance Template object using the specified data.
        ///</summary>
        [Route("maintenance-template")]
        [HttpPost]
        public async Task<ActionResult> CreateAsync([FromBody] MaintenanceTemplate_CreateInput _data, CancellationToken token = default)
        {
            ActionResult response;
            try
            {
                if (ModelState.IsValid)
                {
                    Output<MaintenanceTemplate_CreateOutput> output = await svc.CreateAsync(_data, token);
                    response = StatusCode((int)output.HttpStatus, output);
                    return response;
                }
                else
                {
                    currentErrors.AddModelErrors(ModelState);
                }
            }
            catch (Exception ex)
            {
                currentErrors.MergeWith(errorsParser.FromException(ex));
            }
            response = StatusCode((int)currentErrors.HttpStatus, new Output(currentErrors));
            return response;
        }

        ///<summary>
        /// Updates existing Maintenance Template object using the specified data.
        ///</summary>
        [Route("maintenance-template/{_id}")]
        [HttpPut]
        public async Task<ActionResult> UpdateAsync([FromRoute] int _id, [FromBody] MaintenanceTemplate_UpdateInput_Data _data, CancellationToken token = default)
        {
            ActionResult response;
            try
            {
                if (ModelState.IsValid)
                {
                    Output output = await svc.UpdateAsync(_id, _data, token);
                    response = StatusCode((int)output.HttpStatus, output);
                    return response;
                }
                else
                {
                    currentErrors.AddModelErrors(ModelState);
                }
            }
            catch (Exception ex)
            {
                currentErrors.MergeWith(errorsParser.FromException(ex));
            }
            response = StatusCode((int)currentErrors.HttpStatus, new Output(currentErrors));
            return response;
        }

        ///<summary>
        /// Deletes the specified Maintenance Template object.
        ///</summary>
        [Route("maintenance-template/{_id}")]
        [HttpDelete]
        public async Task<ActionResult> DeleteAsync([FromRoute] int _id, CancellationToken token = default)
        {
            ActionResult response;
            try
            {
                if (ModelState.IsValid)
                {
                    Output output = await svc.DeleteAsync(_id, token);
                    response = StatusCode((int)output.HttpStatus, output);
                    return response;
                }
                else
                {
                    currentErrors.AddModelErrors(ModelState);
                }
            }
            catch (Exception ex)
            {
                currentErrors.MergeWith(errorsParser.FromException(ex));
            }
            response = StatusCode((int)currentErrors.HttpStatus, new Output(currentErrors));
            return response;
        }

        ///<summary>
        /// Reads a list of Maintenance Template objects based on the specified criteria.
        ///</summary>
        [Route("maintenance-template")]
        [HttpGet]
        public async Task<ActionResult> ReadListAsync([FromQuery] MaintenanceTemplate_ReadListInput_Criteria _criteria, CancellationToken token = default)
        {
            ActionResult response;
            try
            {
                if (ModelState.IsValid)
                {
                    Output<ICollection<MaintenanceTemplate_ReadListOutput>> output = await svc.ReadListAsync(_criteria, token);
                    response = StatusCode((int)output.HttpStatus, output);
                    return response;
                }
                else
                {
                    currentErrors.AddModelErrors(ModelState);
                }
            }
            catch (Exception ex)
            {
                currentErrors.MergeWith(errorsParser.FromException(ex));
            }
            response = StatusCode((int)currentErrors.HttpStatus, new Output(currentErrors));
            return response;
        }
    }
}